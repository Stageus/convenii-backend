generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  idx        Int        @id @default(autoincrement())
  password   String     @db.VarChar
  deleted_at DateTime?  @db.Timestamp(6)
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  email      String     @db.VarChar
  nickname   String     @db.VarChar
  rank_idx   Int        @default(1)
  rank       rank       @relation(fields: [rank_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_rank_to_account")
  bookmark   bookmark[]
  review     review[]
}

model bookmark {
  idx         Int      @id @default(autoincrement())
  account_idx Int      @default(autoincrement())
  product_idx Int      @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  account     account  @relation(fields: [account_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_to_bookmark")
  product     product  @relation(fields: [product_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_to_bookmark")
}

model category {
  idx     Int       @id @default(autoincrement())
  name    String?   @db.VarChar
  product product[]
}

model company {
  idx           Int             @id @default(autoincrement())
  name          String          @db.VarChar
  event_history event_history[]
}

model event {
  idx           Int             @id @default(autoincrement())
  type          String          @db.VarChar
  priority      Int
  event_history event_history[]
}

model event_history {
  idx         Int      @id @default(autoincrement())
  company_idx Int      @default(autoincrement())
  product_idx Int      @default(autoincrement())
  event_idx   Int      @default(autoincrement())
  start_date  DateTime @db.Date
  price       String?  @db.VarChar
  company     company  @relation(fields: [company_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_to_event_history")
  event       event    @relation(fields: [event_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_to_event_history")
  product     product  @relation(fields: [product_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_to_event_history")
}

model product {
  idx           Int             @id @default(autoincrement())
  category_idx  Int             @default(autoincrement())
  name          String          @db.VarChar
  price         String          @db.VarChar
  image_url     String          @db.VarChar
  deleted_at    DateTime?       @db.Timestamp(6)
  score         Decimal?        @db.Decimal(3, 2)
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  bookmark      bookmark[]
  event_history event_history[]
  category      category        @relation(fields: [category_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_to_product")
  review        review[]
}

model rank {
  idx     Int       @id @default(autoincrement())
  type    String    @db.VarChar
  account account[]
}

model review {
  idx         Int      @id @default(autoincrement())
  product_idx Int      @default(autoincrement())
  account_idx Int      @default(autoincrement())
  content     String?
  score       Int
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  account     account  @relation(fields: [account_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_to_review")
  product     product  @relation(fields: [product_idx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_to_review")
}
